<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0084)http://www.ffconsultancy.com/products/fsharp_journal/subscribers/native_interop.html -->
<!--?xml version="1.0" encoding="iso-8859-1"?--><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"><HTML><HEAD><META 
content="IE=10.000" http-equiv="X-UA-Compatible">
   <TITLE>F# Journal: Interoperating with native code from F#</TITLE>   
<META http-equiv="Content-Type" content="text/html; charset=windows-1252"><LINK 
href="F%23%20Journal%20Interoperating%20with%20native%20code%20from%20F%23_files/style.css" 
rel="stylesheet" type="text/css">   <LINK href="F%23%20Journal%20Interoperating%20with%20native%20code%20from%20F%23_files/style(1).css" 
rel="stylesheet" type="text/css">   <LINK href="F%23%20Journal%20Interoperating%20with%20native%20code%20from%20F%23_files/individual.css" 
rel="stylesheet" type="text/css"> 
<META name="GENERATOR" content="MSHTML 10.00.9200.16458"></HEAD>
<BODY>       <TITLE>F# Journal: Interoperating with native code from F#</TITLE>  
   <LINK href="F%23%20Journal%20Interoperating%20with%20native%20code%20from%20F%23_files/style.css" 
rel="stylesheet" type="text/css">     <LINK href="F%23%20Journal%20Interoperating%20with%20native%20code%20from%20F%23_files/style(1).css" 
rel="stylesheet" type="text/css">     <LINK href="F%23%20Journal%20Interoperating%20with%20native%20code%20from%20F%23_files/individual.css" 
rel="stylesheet" type="text/css">         
<TABLE id="logo">
  <TBODY>
  <TR>
    <TD width="100%"><IMG src="F%23%20Journal%20Interoperating%20with%20native%20code%20from%20F%23_files/title.gif"> 
              </TD>
    <TD><IMG src="F%23%20Journal%20Interoperating%20with%20native%20code%20from%20F%23_files/left.gif"> 
              </TD></TR></TBODY></TABLE>
<TABLE id="menu">
  <TBODY>
  <TR>
    <TD width="25%">
    <TD width="25%"><A 
      href="http://www.ffconsultancy.com/products/index.html">Home Page</A>      
         </TD>
    <TD width="25%"><A href="http://www.ffconsultancy.com/products/fsharp_journal/subscribers/index.html">The 
      F# Journal</A>         </TD>
    <TD width="25%"></TR></TBODY></TABLE>
<TABLE id="page">
  <TBODY>
  <TR>
    <TD>
      <H1>Interoperating with native code from F#</H1>
      <P>Although the F# programming language offers many improvements over 
      older languages such as unmanaged C, C++ and Fortran the need to 
      interoperate with native code can still arise. The two most important uses 
      for native code interoperability are performance and legacy. This article 
      describes how native code can be invoked from F# programs, including 
      essential design advice for building robust interfaces in this otherwise 
      error-prone task.</P>
      <H2>Introduction</H2>
      <P>Unmanaged C, C++ and Fortran are compiled to machine code for direct 
      execution by the CPU. The machine code is typically either in the form of 
      a dynamically linked library (DLL) or a complete application (EXE). In the 
      former case, the DLL can be used from other code including managed code 
      through the use of a foreign function interface (FFI).</P>
      <P>In contrast, managed code is compiled to an intermediate representation 
      that conveys higher-level information than machine code. Managed code 
      provides a multitude of hugely-productive improvements over native 
      code:</P>
      <P>
      <UL>
        <LI>The high-level intermediate representation is verified before it is 
        executed to provide security assurances.</LI>
        <LI>Easy interoperability between languages on the common language 
        run-time, including a language-agnostic concurrent garbage collector 
        that allows data structures to be shared between languages rather than 
        copied.</LI>
        <LI>Safe execution environment where untraceable access violations and 
        silent buffer overruns are a thing of the past.</LI>
        <LI>Easier parallel and concurrent programming.</LI>
        <LI>Platform independence (e.g. Windows and XBox).</LI></UL>
      <P></P>
      <P>However, there are still two important reasons to use native code:</P>
      <P>
      <UL>
        <LI>Performance: unmanaged code can be faster.</LI>
        <LI>Legacy: A lot of functionality has already been implemented as 
        unmanaged code and access to that code can save valuable development 
        time.</LI></UL>
      <P></P>
      <P>This article describes how the FFI in F# can be used to invoke 
      functionality from native code DLLs. Firstly by translating F# code into 
      C++ code to improve performance, building an unmanaged DLL and using it 
      safely from F#. Then by writing a more comprehensive interface to an 
      existing high-performance native-code library.</P>
      <H2>Dropping down to C/C++</H2>
      <P>The phrase "dropping to C" is often heard in the context of high-level 
      programming languages that impose a significant performance cost. 
      Fortunately, the F# programming language is one of the most efficient 
      high-level languages in existence and, consequently, the need to drop to C 
      is greatly reduced.</P>
      <P>This section examines a simple function written in F# taken from the 
      earlier F#.NET Journal article on the SciMark2 benchmark, translates it 
      into C++ to improve performance and uses the FFI to call the unmanaged DLL 
      generated from the C++ for up to a 3.5× performance improvement over the 
      original F#.</P>
      <H3>Translating F# into C++</H3>
      <P>We are going to study the              <CODE>lu</CODE> function from 
      the SciMark2 benchmark that computes the LU decomposition of a matrix 
      using partial pivoting. The original F# implementation is:           </P>
<PRE>&gt; #light;;
&gt; module FS =
    let lu (a : float [,]) =
      let a = Array2.copy a
      let n = Array2.length1 a
      let m = Array2.length2 a
      let pivot = Array.create (min n m) 0
      let minmn = min m n
      for j=0 to minmn-1 do
        let mutable jp = j
        let mutable t = abs(a.[j,j])
        for i=j+1 to m-1 do
          let ab = abs(a.[i,j])
          if ab &gt; t then
            jp &lt;- i
            t &lt;- ab
        pivot.[j] &lt;- jp
        if a.[jp,j] = 0. then invalid_arg "lu"
        if jp &lt;&gt; j then
          for i=0 to m-1 do
            let t = a.[jp,i]
            a.[jp,i] &lt;- a.[j,i]
            a.[j,i] &lt;- t
        if j &lt; m-1 then
          let recp = 1. / a.[j,j]
          for k=j+1 to m-1 do
            a.[k,j] &lt;- a.[k,j] * recp
        if j &lt; minmn-1 then
          for ii=j+1 to m-1 do
            for jj=j+1 to n-1 do
              a.[ii,jj] &lt;- a.[ii,jj] - a.[ii,j] * a.[j,jj]
      a, pivot;;
module FS : begin
  val lu : float [,] -&gt; float [,] * int array
end</PRE>
      <P>This function is slightly different to the optimized F# implementation 
      that was given in the previous F#.NET Journal article. Specifically, this 
      implementation is simpler, uses .NET's 2D arrays rather than arrays of 
      arrays and does not use inline functions or manually-unrolled loops.</P>
      <P>Thanks to the absence of high-level constructs, this function is easily 
      translated into C++:</P>
<PRE>#include &lt;cmath&gt;</PRE>
<PRE>extern "C"</PRE>
<PRE>__declspec(dllexport)
int lu(int M, int N, double *A, int *pivot)
{
    int minMN = M &lt; N ? M : N;
    
    for (int j=0; j&lt;minMN; j++)
    {
        int jp=j;
        double t = abs(A[j*M + j]);
        
        for (int i=j+1; i&lt;M; i++)
        {
            double ab = abs(A[i*M + j]);
            if (ab &gt; t)
            {
                jp = i;
                t = ab;
            }
        }
        
        pivot[j] = jp;
        
        if (A[jp*M + j] == 0) return 1;
        
        if (jp != j)
        {
            for (int i=0; i&lt;M; ++i)
            {
                double tA = A[j*M + i];
                A[j*M + i] = A[jp*M + i];
                A[jp*M + i] = tA;
            }
        }
        
        if (j &lt; M-1)
        {
            double recp = 1.0 / A[j*M + j];
            for (int k=j+1; k&lt;M; k++)
                A[k*M + j] *= recp;
        }
        
        if (j &lt; minMN-1)
            for (int ii=j+1; ii&lt;M; ii++)
                for (int jj=j+1; jj&lt;N; jj++)
                    A[ii*M + jj] -= A[ii*M + j] * A[j*M + jj];
    }
    
    return 0;
}</PRE>
      <P>Note, in particular, the              <CODE>extern "C"</CODE> used to 
      instruct the C++ compiler to avoid name mangling and the              
      <CODE>__declspec(dllexport)</CODE> qualification that instructs the linker 
      to export this function from the DLL, making it accessible to users of the 
      DLL.           </P>
      <P>The              <CODE>dumpbin.exe</CODE> program provided with Visual 
      Studio can be used to examine the definitions exported by an unmanaged 
      DLL:           </P>
      <P>
      <P style="text-align: center;"><IMG src="F%23%20Journal%20Interoperating%20with%20native%20code%20from%20F%23_files/exports.gif"> 
                  </P>
      <P></P>
      <P>In this case, we see a single function with the name              
      <CODE>lu</CODE> exported as expected.           </P>
      <H3>Referencing unmanaged code from F#</H3>
      <P>Once the above C++ code is compiled into a DLL it is easily referenced 
      from an F# program.</P>
      <P>We begin by opening the following namespace for the              
      <CODE>DllImportAttribute</CODE> :           </P>
<PRE>&gt; open System.Runtime.InteropServices;;</PRE>
      <P>The              <CODE>lu</CODE> function exported from this DLL may be 
      imported into F# as follows:           </P>
<PRE>&gt; module Primitive =
    [&lt;DllImport(@"C:\Documents and Settings\Jon\My Documents\Visual Studio
2005\Projects\C++\LU\Release\lu.dll")&gt;]
    extern int lu(int M, int N, double *A, int *pivot);;
module Primitive : begin
  val lu : int * int * double nativeptr * int nativeptr -&gt; int
end</PRE>
      <P>The entry point exported by the DLL that is bound to this function is 
      the same as the name of the function (             <CODE>lu</CODE> in this 
      case) by default but can also be overridden with another value by 
      specifying              <CODE>EntryPoint="..."</CODE> in the              
      <CODE>DllImport</CODE> .           </P>
      <P>Note how we have quarantined this unsafe function in the              
      <CODE>Primitive</CODE> module. This whole module might be marked           
         <CODE>internal</CODE> in a real project to ensure that external code is 
      unable to use this unsafe interface directly. As program complexity grows 
      it is absolutely essential to minimize the amount of unsafe code and this 
      technique is both simple and scales well.           </P>
      <P>The C-like declaration syntax used in the previous line:</P>
<PRE>extern int lu(int M, int N, double *A, int *pivot)</PRE>
      <P>resulted in the following F# type:</P>
<PRE>val lu : int * int * double nativeptr * int nativeptr -&gt; int</PRE>
      <P>In this case we have a matrix              <CODE>A</CODE> represented 
      as a contiguous array of floating point numbers and a              
      <CODE>pivot</CODE> vector represented as an int array. These arrays are 
      represented by pointers to their first elements in C/C++ and the size of 
      the arrays is passed separately (it is even implicit in the case of        
            <CODE>pivot</CODE> ). The F# representation of these pointers is the 
                   <CODE>'a nativeptr</CODE> type where the type variable        
            <CODE>'a</CODE> denotes the type being pointed to.           </P>
      <H2>Pinning</H2>
      <P>The              <CODE>'a nativeptr</CODE> type handled by the unsafe 
      interface code in F# requires the caller to obtain a value of this type 
      from a native F# type (1D and 2D .NET arrays of the              
      <CODE>float</CODE> value type in this case). This is the only subtlety 
      involved in using F#'s FFI and it arises when passing .NET reference 
      types.           </P>
      <P>Specifically, the .NET garbage collector dynamically defragments the 
      heap by moving data structures around. This requires the garbage collector 
      to be aware of all pointers to managed data structures, ensure that they 
      are not being accessed by user code during a move by any threads and 
      update all of the pointers to a data structure whenever they are moved. 
      This is an incredibly intricate procedure that is extremely difficult to 
      implement correctly and Microsoft have spent a huge amount of time and 
      effort building a reliable implementation of the compiler and run-time 
      that cooperate to make this all transparent. However, direct use of 
      unmanaged code breaks these fundamental assumptions and we must work to 
      ensure that unmanaged code is not able to destabilize the rest of the 
      system.</P>
      <P>The solution is to              <I>pin</I> the data structures in 
      memory before they are passed by pointer to the unmanaged code. The 
      garbage collector is not allowed to move pinned data structures and the 
      unmanaged code is then free to read and write to these data structures 
      without having to cooperate with the .NET run-time and safe in the 
      knowledge that the data will not be moved while it is in use.           
      </P>
      <P>Pinning is very easy and F# even provides              
      <CODE>PinnedArray</CODE> and              <CODE>PinnedArray2</CODE> 
      classes in the following namespace:           </P>
<PRE>&gt; open Microsoft.FSharp.NativeInterop;;</PRE>
      <P>These classes automate the pinning of 1D and 2D .NET arrays and may be 
      used as follows:</P>
<PRE>&gt; exception SingularMatrix;;
exception SingularMatrix
&gt; let lu m =
    let m = Array2.copy m
    let rows, cols = m.GetLength(0), m.GetLength(1)
    Array2.pin m (fun mPtr -&gt;
      let pivot = Array.create (min rows cols) 0
      Array.pin pivot (fun pivotPtr -&gt;
        if Primitive.lu(cols, rows, mPtr, pivotPtr) &lt;&gt; 0 then raise SingularMatrix
        m, pivot));;
val lu : double [,] -&gt; double [,] * int array</PRE>
      <P>This function begins by copying the input 2D array to ensure that the 
      input is not destroyed. The number of rows and columns in the input is 
      determined. Then the 2D array              <CODE>m</CODE> is pinned in 
      place using the              <CODE>Array2.pin</CODE> higher-order function 
      for the duration of its function argument. The anonymous function that is 
      passed as an argument accepts the native pointer to              
      <CODE>m</CODE> as its argument. A 1D              <CODE>pivot</CODE> array 
      is created and the same procedure is used to pin it, with the              
      <CODE>Array.pin</CODE> function. Finally, the              
      <CODE>Primitive.lu</CODE> function is called to perform the actual LU 
      decomposition and the matrix and pivot vector and returned if the 
      computation was successful.           </P>
      <H3>Testing</H3>
      <P>The C++ routine is most easily tested by comparing its output to that 
      of the original F# implementation. The performance of the two 
      implementations may be assessed at the same time.</P>
      <P>Consider a 1024×1024 random matrix:</P>
<PRE>&gt; let n = 1024;;
val n : int
&gt; let rand = System.Random();;
val rand : System.Random
&gt; let m = Array2.init n n (fun _ _ -&gt; rand.NextDouble());;
val m : float [,]</PRE>
      <P>The performance of calling out to the unmanaged C++ implementation may 
      be measured as follows:</P>
<PRE>&gt; let time f x =
    let t = System.Diagnostics.Stopwatch()
    t.Start()
    try f x finally
    printf "Took %dms\n" t.ElapsedMilliseconds;;
val time : ('a -&gt; 'b) -&gt; 'a -&gt; 'b
&gt; let res1 = time lu m;;
val res1 : double [,] * int array
Took 3531ms</PRE>
      <P>In comparison, the original F# implementation is around 30% slower for 
      n=1024:</P>
<PRE>&gt; let res2 = time FS.lu m;;
val res2 : float [,] * int array
Took 5308ms</PRE>
      <P>Examining a wider variety of n using freshly allocated inputs and 
      averaging over many runs produces the following results:</P>
      <P>
      <P style="text-align: center;"><IMG src="F%23%20Journal%20Interoperating%20with%20native%20code%20from%20F%23_files/performance.gif"> 
                  </P>
      <P></P>
      <P>For tiny matrices (n&lt;5) the F# implementation is faster than calling 
      the C++ implementation from F# because of the cost of invoking a native 
      function from a managed language.</P>
      <P>The following graph illustrates the speedup of calling C++ from F#:</P>
      <P>
      <P style="text-align: center;"><IMG src="F%23%20Journal%20Interoperating%20with%20native%20code%20from%20F%23_files/speedup.gif"> 
                  </P>
      <P></P>
      <P>This graph is very enlighening and can be naturally split into three 
      separate sections:</P>
      <P>
      <OL>
        <LI>For n&lt;100, the proportion of the time spent performing the 
        foreign function call to native code decreases as the time spent 
        performing the actual LU decomposition increases.</LI>
        <LI>For 100&lt;n&lt;400, the CPU-intensive LU decomposition dominates 
        the time taken and the more efficient C++ version shows a marked 
        performance improvement over the F# because it is inherently faster 
        thanks to the avoidance of high-level issues such as garbage 
        collection.</LI>
        <LI>Finally, for n&gt;400, larger problem sizes shift the bottleneck 
        from the CPU onto the memory subsystem where the difference between C++ 
        and F# code is much smaller and the speedup falls to only 50%.</LI></OL>
      <P></P>
      <P>These results very clearly elucidate the basic properties of calling 
      into high-performance unmanaged code from a managed language like F#.</P>
      <H2>More extensive bindings</H2>
      <P>Having studied the basic principles and trade-offs behind translating 
      F# code into languages like C++ in the quest for improved performance it 
      is instructive to examine the related task of binding existing unmanaged 
      libraries. The              <A href="http://fftw.org/">FFTW</A> library by 
      Matteo Frigo and Steven G. Johnson is an excellent example.           </P>
      <P>Our bindings will satisfy the following fftw.fsi interface definition 
      for an              <CODE>FFTW</CODE> module:           </P>
<PRE>#light</PRE>
<PRE>module FFTW</PRE>
<PRE>open Math</PRE>
<PRE>val fft : complex array -&gt; complex array
val ifft : complex array -&gt; complex array</PRE>
      <P>The bindings themselves may be implemented as follows:</P>
<PRE>#light</PRE>
<PRE>module FFTW</PRE>
<PRE>open System.Runtime.InteropServices</PRE>
<PRE>module Primitive =
  [&lt;DllImport(@"C:\Program Files\fftw-3.1.2-dll\libfftw3-3.dll")&gt;]
  extern double *fftw_malloc(int size)</PRE>
<PRE>  [&lt;DllImport(@"C:\Program Files\fftw-3.1.2-dll\libfftw3-3.dll")&gt;]
  extern void fftw_free(double *data)</PRE>
<PRE>  [&lt;DllImport(@"C:\Program Files\fftw-3.1.2-dll\libfftw3-3.dll")&gt;]
  extern void *fftw_plan_dft_1d(int n, double *i, double *o, int sign, int flags)</PRE>
<PRE>  [&lt;DllImport(@"C:\Program Files\fftw-3.1.2-dll\libfftw3-3.dll")&gt;]
  extern void fftw_destroy_plan(void *plan)</PRE>
<PRE>  [&lt;DllImport(@"C:\Program Files\fftw-3.1.2-dll\libfftw3-3.dll")&gt;]
  extern void fftw_execute(void *plan)</PRE>
<PRE>  [&lt;DllImport(@"C:\Program Files\fftw-3.1.2-dll\libfftw3-3.dll")&gt;]
  extern int fftw_init_threads()</PRE>
<PRE>  [&lt;DllImport(@"C:\Program Files\fftw-3.1.2-dll\libfftw3-3.dll")&gt;]
  extern int fftw_plan_with_nthreads(int n)</PRE>
<PRE>Primitive.fftw_init_threads() |&gt; ignore</PRE>
<PRE>Primitive.fftw_plan_with_nthreads System.Environment.ProcessorCount</PRE>
<PRE>let global_lock = box 0</PRE>
<PRE>let general sign (a : Math.Complex array) =
  let n = Array.length a
  if n=0 then [||] else
  lock global_lock (fun () -&gt;
    let ptr = Primitive.fftw_malloc(16 * n)
    let array = NativeInterop.NativeArray.FromPtr(ptr, n)
    let plan = Primitive.fftw_plan_dft_1d(n, ptr, ptr, sign, 65)
    for i=0 to a.Length - 1 do
      array.[2 * i] &lt;- a.[i].r
      array.[2 * i + 1] &lt;- a.[i].i
    Primitive.fftw_execute plan
    let s = 1.0 / sqrt(float n)
    let result = Array.init n (fun i -&gt; complex (s * array.[2 * i]) (s * array.[2 * i + 1]))
    Primitive.fftw_destroy_plan plan
    Primitive.fftw_free ptr
    result)</PRE>
<PRE>let fft a = general (-1) a
let ifft a = general 1 a</PRE>
      <P>Once again, a              <CODE>Primitive</CODE> module is used to 
      encapsulate the unsafe F# functions that invoke the unmanaged code 
      directly. These definitions are only accessible within this compilation 
      unit because they are not exported by the interface definition file (only 
      two functions are exported). We have assumed that the              <A 
      href="http://fftw.org/install/windows.html">distribution of FFTW for 
      Windows</A> has been unpacked into the "C:\Program Files\fftw-3.1.2-dll\" 
      directory. The DLL itself is called "libfftw3-3.dll".           </P>
      <P>Then the              <CODE>fftw_init_threads</CODE> function is used 
      to enable threads in FFTW and the              
      <CODE>fftw_plan_with_nthreads</CODE> function is used to set the number of 
      threads to the number of processors. These global definitions will be 
      evaluated by F# as soon as any program accesses anything in this           
         <CODE>FFTW</CODE> module, i.e. as soon as the              
      <CODE>fft</CODE> or              <CODE>ifft</CODE> functions are used.     
            </P>
      <P>A              <CODE>global_lock</CODE> object is created to act as a 
      global lock for the FFTW bindings because our bindings are not thread 
      safe. In fact, a guru interface to FFTW exists that allows the             
       <CODE>fftw_execute</CODE> function to be thread safe. A more 
      sophisticated F# interface to FFTW could exploit this to allow FFTs to be 
      computed in parallel from separate .NET threads.           </P>
      <P>As its name implies, the              <CODE>general</CODE> function 
      computes a general 1D FFT of a complex array. This function is 
      parameterized over the              <CODE>sign</CODE> value that will be 
      passed to FFTW to indicate that either a forward or reverse transform is 
      to be done. The global lock is taken out before the first call to the 
      thread unsafe FFTW functions. The              <CODE>fftw_malloc</CODE> 
      and              <CODE>fftw_free</CODE> functions allocate and free 
      aligned blocks of memory, respectively. The              
      <CODE>fftw_plan_dft_1d</CODE> and              
      <CODE>fftw_destroy_plan</CODE> functions create and dispose of 
      precomputations associated with a given length of transform, respectively. 
      Finally, the              <CODE>fftw_execute</CODE> function computes the 
      FFT. This function simply fills a native              <CODE>float 
      array</CODE> with the real and imaginary parts of the given              
      <CODE>complex array</CODE> and vice-versa to obtain the result.           
      </P>
      <P>Finally, the              <CODE>fft</CODE> and              
      <CODE>ifft</CODE> functions that will be exported are defined in terms of 
      the              <CODE>general</CODE> function.           </P>
      <H2>Summary</H2>
      <P>This article has described how the FFI can be used to invoke native 
      code:</P>
      <P>
      <UL>
        <LI>Easily, thanks to the F# FFI.</LI>
        <LI>Safely, by quarantining unsafe code into the smallest possible 
        area.</LI>
        <LI>Efficiently, by exploiting prior knowledge of the properties of FFI 
        calls, unmanaged code efficiency and memory stress.</LI></UL>
      <P></P>
      <P>Finally, the article concluded with a production-quality interface to 
      the excellent FFTW library. This combines the lessons learned regarding 
      interfacing with native code with the challenge of writing a safe 
      interface to an existing library (rather than custom code) with the added 
      twist of thread safety.</P></TD></TR></TBODY></TABLE>
<TABLE id="footer">
  <TBODY>
  <TR>
    <TD>© Flying Frog Consultancy Ltd., 2007</TD>
    <TD>Contact the            <A 
      href="mailto:webmaster@ffconsultancy.com">webmaster</A>         
  </TD></TR></TBODY></TABLE>
<SCRIPT src="F%23%20Journal%20Interoperating%20with%20native%20code%20from%20F%23_files/urchin.js" type="text/javascript">
<script type="text/javascript">
_uacct = "UA-197840-1";
urchinTracker();</SCRIPT>
 </BODY></HTML>
